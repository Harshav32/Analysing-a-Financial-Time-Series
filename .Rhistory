library(quantmod)
library(zoo)
libraray(xts)
library(zoo)
library(xts)
library(quantmod)
getSymbols("AAPL", from = Sys.Date() - 5*365)
getSymbols("HON", from = Sys.Date() - 5*365)
getSymbols("AAPL", from = Sys.Date() - 5*365)
getSymbols("HON", from = Sys.Date() - 5*365)
# Check structure of AAPL data
str(AAPL)
# Check structure of HON data
str(HON)
getSymbols("AAPL", from = Sys.Date() - 5*365)
getSymbols("HON", from = Sys.Date() - 5*365)
# Check structure of AAPL data
str(AAPL)
# Check structure of HON data
str(HON)
# Plot AAPL closing prices
plot(Cl(AAPL), main = "AAPL Closing Prices", ylab = "Price", xlab = "Date")
# Plot HON closing prices
plot(Cl(HON), main = "HON Closing Prices", ylab = "Price", xlab = "Date")
# Fit AR(1) model for HON
hon_ar1 <- arima(HON$HON.Close, order = c(1, 0, 0))
# Generate forecasts for HON
hon_forecast <- forecast(hon_ar1, h = 6)  # Forecast for 6 months
library(zoo)
library(xts)
library(quantmod)
library(forecast)
library(zoo)
library(xts)
library(quantmod)
library(forecast)
getSymbols("AAPL", from = Sys.Date() - 5*365)
getSymbols("HON", from = Sys.Date() - 5*365)
# Check structure of AAPL data
str(AAPL)
# Check structure of HON data
str(HON)
# Plot AAPL closing prices
plot(Cl(AAPL), main = "AAPL Closing Prices", ylab = "Price", xlab = "Date")
# Plot HON closing prices
plot(Cl(HON), main = "HON Closing Prices", ylab = "Price", xlab = "Date")
# Fit AR(1) model for HON
hon_ar1 <- arima(HON$HON.Close, order = c(1, 0, 0))
# Generate forecasts for HON
hon_forecast <- forecast(hon_ar1, h = 6)  # Forecast for 6 months
# Plot actual series and forecasts for HON
plot(hon_forecast, main = "HON AR(1) Forecast", xlab = "Time", ylab = "Price")
# Fit AR(1) model for AAPL
aapl_ar1 <- arima(AAPL$AAPL.Close, order = c(1, 0, 0))
# Generate forecasts for AAPL
aapl_forecast <- forecast(aapl_ar1, h = 6)  # Forecast for 6 months
# Plot actual series and forecasts for AAPL
plot(aapl_forecast, main = "AAPL AR(1) Forecast", xlab = "Time", ylab = "Price")
# Perform Augmented Dickey-Fuller test for HON
adf_hon <- adf.test(HON$HON.Close)
# Perform KPSS test for HON
kpss_hon <- kpss.test(HON$HON.Close)
# Perform Augmented Dickey-Fuller test for HON
adf_hon <- adf.test(HON$HON.Close)
library(zoo)
library(xts)
library(quantmod)
library(forecast)
library(tseries)
library(zoo)
library(xts)
library(quantmod)
library(forecast)
library(tseries)
# Perform Augmented Dickey-Fuller test for HON
adf_hon <- adf.test(HON$HON.Close)
print(adf_hon)
# Perform Augmented Dickey-Fuller test for AAPL
adf_aapl <- adf.test(AAPL$AAPL.Close)
print(adf_aapl)
Augmented Dickey-Fuller Test
# Load the tseries package
library(tseries)
# Perform Augmented Dickey-Fuller test for HON
adf_hon <- adf.test(HON$HON.Close)
print(adf_hon)
# Perform Augmented Dickey-Fuller test for AAPL
adf_aapl <- adf.test(AAPL$AAPL.Close)
print(adf_aapl)
# Perform KPSS test for HON
kpss_hon <- kpss.test(HON$HON.Close)
print(kpss_hon)
# Perform KPSS test for AAPL
kpss_aapl <- kpss.test(AAPL$AAPL.Close)
print(kpss_aapl)
# Perform KPSS test for HON
kpss_hon <- kpss.test(HON$HON.Close)
print(kpss_hon)
# Perform KPSS test for AAPL
kpss_aapl <- kpss.test(AAPL$AAPL.Close)
print(kpss_aapl)
library(forecast)
# Fit auto.arima() model for HON
hon_auto_arima <- auto.arima(HON$HON.Close)
# Generate forecasts for HON
hon_forecast <- forecast(hon_auto_arima, h = 6)  # Forecast for 6 months
# Plot actual series and forecasts for HON
plot(hon_forecast, main = "HON Auto ARIMA Forecast", xlab = "Time", ylab = "Price")
# Fit Holt-Winters model for AAPL
aapl_holt_winters <- HoltWinters(AAPL$AAPL.Close)
# Load the forecast package for Holt-Winters functions
library(forecast)
# Fit Holt-Winters model for AAPL
aapl_hw <- hw(AAPL$AAPL.Close)
# Fit time-series model for HON using auto.arima()
hon_arima <- auto.arima(HON$HON.Close)
# Generate forecasts for HON
hon_forecast <- forecast(hon_arima, h = 6)  # Forecast for 6 months
# Plot actual series and forecasts for HON
plot(hon_forecast, main = "HON Forecast (auto.arima)", xlab = "Time", ylab = "Price")
# Fit time-series model for AAPL using Holt-Winters
aapl_hw <- HoltWinters(AAPL$AAPL.Close)
library(forecast)
# Convert the AAPL and HON data to time series objects with frequency 1 (assuming daily data)
aapl_ts <- ts(AAPL$AAPL.Close, frequency = 1)
hon_ts <- ts(HON$HON.Close, frequency = 1)
# Apply Holt-Winters method
aapl_hw <- HoltWinters(aapl_ts)
library(forecast)
# Convert the AAPL and HON data to time series objects with frequency 1 (assuming daily data)
aapl_ts <- ts(AAPL$AAPL.Close, frequency = 1)
hon_ts <- ts(HON$HON.Close, frequency = 1)
# Fit auto.arima() model for HON
hon_auto_arima <- auto.arima(HON$HON.Close)
# Generate forecasts for HON
hon_forecast <- forecast(hon_auto_arima, h = 6)  # Forecast for 6 months
# Plot actual series and forecasts for HON
plot(forecast(hon_hw, h = 6), main = "HON Holt-Winters Forecast", xlab = "Time", ylab = "Price")
library(forecast)
# Convert the AAPL and HON data to time series objects with frequency 1 (assuming daily data)
aapl_ts <- ts(AAPL$AAPL.Close, frequency = 1)
hon_ts <- ts(HON$HON.Close, frequency = 1)
# Apply Holt-Winters method
hon_hw <- HoltWinters(hon_ts)
library(forecast)
# Fit ARIMA model for HON using auto.arima
hon_arima <- auto.arima(HON$HON.Close)
print(hon_arima)
# Generate forecasts for HON
hon_forecast <- forecast(hon_arima, h = 6)
# Plot actual series and forecasts for HON
plot(hon_forecast, main = "HON ARIMA Forecast", xlab = "Time", ylab = "Price")
# Fit ARIMA model for AAPL using auto.arima
aapl_arima <- auto.arima(AAPL$AAPL.Close)
print(aapl_arima)
# Generate forecasts for AAPL
aapl_forecast <- forecast(aapl_arima, h = 6)
# Plot actual series and forecasts for AAPL
plot(aapl_forecast, main = "AAPL ARIMA Forecast", xlab = "Time", ylab = "Price")
library(readr)
dry_wine <- read_csv("dry_wine.csv")
View(dry_wine)
library(zoo)
library(xts)
library(quantmod)
library(forecast)
library(tseries)
library(readr)
dry_wine <- read_csv("dry_wine.csv")
View(dry_wine)
glimpse(dry_wine)
library(zoo)
library(xts)
library(quantmod)
library(forecast)
library(tseries)
library(readr)
library(dplyr)
dry_wine <- read_csv("dry_wine.csv")
View(dry_wine)
glimpse(dry_wine)
# Load required packages
library(forecast)
# Read the data from CSV
dry_wine <- read.csv("dry_wine.csv")
# Convert the data to a time series object
dry_wine_ts <- ts(dry_wine$Price, frequency = 12)  # Assuming monthly data
# Read the data from CSV
dry_wine <- read.csv("dry_wine.csv")
# View the structure of the data
str(dry_wine)
# Convert the data to a time series object
dry_wine_ts <- ts(dry_wine$x, frequency = 12)  # Assuming monthly data
# Fit ARIMA model using auto.arima
dry_wine_arima <- auto.arima(dry_wine_ts)
print(dry_wine_arima)
# Generate forecasts
dry_wine_forecast <- forecast(dry_wine_arima, h = 12)  # Forecast for the next 12 months
# Plot actual series and forecasts
plot(dry_wine_forecast, main = "Dry Wine Price Forecast", xlab = "Time", ylab = "Price")
# Generate forecasts
dry_wine_forecast <- forecast(dry_wine_arima, h = 12)  # Forecast for the next 12 months
# Plot actual series and forecasts
plot(dry_wine_forecast, main = "Dry Wine Price Forecast", xlab = "Time", ylab = "Price")
rmarkdown::render("ALY6050_MOD3Project_KasireddyH",output_format="word_document")
rmarkdown::render("ALY6050_MOD3Project_KasireddyH.Rmd",output_format="word_document")
library(zoo)
library(xts)
library(quantmod)
library(forecast)
library(tseries)
library(readr)
library(dplyr)
dry_wine <- read_csv("dry_wine.csv")
View(dry_wine)
getSymbols("AAPL", from = Sys.Date() - 5*365)
getSymbols("HON", from = Sys.Date() - 5*365)
# Check structure of AAPL data
str(AAPL)
# Check structure of HON data
str(HON)
# Plot AAPL closing prices
plot(Cl(AAPL), main = "AAPL Closing Prices", ylab = "Price", xlab = "Date")
# Plot HON closing prices
plot(Cl(HON), main = "HON Closing Prices", ylab = "Price", xlab = "Date")
# Fit AR(1) model for HON
hon_ar1 <- arima(HON$HON.Close, order = c(1, 0, 0))
# Generate forecasts for HON
hon_forecast <- forecast(hon_ar1, h = 6)  # Forecast for 6 months
# Plot actual series and forecasts for HON
plot(hon_forecast, main = "HON AR(1) Forecast", xlab = "Time", ylab = "Price")
# Fit AR(1) model for AAPL
aapl_ar1 <- arima(AAPL$AAPL.Close, order = c(1, 0, 0))
# Generate forecasts for AAPL
aapl_forecast <- forecast(aapl_ar1, h = 6)  # Forecast for 6 months
# Plot actual series and forecasts for AAPL
plot(aapl_forecast, main = "AAPL AR(1) Forecast", xlab = "Time", ylab = "Price")
# Perform Augmented Dickey-Fuller test for HON
adf_hon <- adf.test(HON$HON.Close)
print(adf_hon)
# Perform Augmented Dickey-Fuller test for AAPL
adf_aapl <- adf.test(AAPL$AAPL.Close)
print(adf_aapl)
# Perform KPSS test for HON
kpss_hon <- kpss.test(HON$HON.Close)
print(kpss_hon)
# Perform KPSS test for AAPL
kpss_aapl <- kpss.test(AAPL$AAPL.Close)
print(kpss_aapl)
library(forecast)
# Fit ARIMA model for HON using auto.arima
hon_arima <- auto.arima(HON$HON.Close)
print(hon_arima)
# Generate forecasts for HON
hon_forecast <- forecast(hon_arima, h = 6)
# Plot actual series and forecasts for HON
plot(hon_forecast, main = "HON ARIMA Forecast", xlab = "Time", ylab = "Price")
# Fit ARIMA model for AAPL using auto.arima
aapl_arima <- auto.arima(AAPL$AAPL.Close)
print(aapl_arima)
# Generate forecasts for AAPL
aapl_forecast <- forecast(aapl_arima, h = 6)
# Plot actual series and forecasts for AAPL
plot(aapl_forecast, main = "AAPL ARIMA Forecast", xlab = "Time", ylab = "Price")
# Convert the data to a time series object
dry_wine_ts <- ts(dry_wine$x, frequency = 12)  # Assuming monthly data
# Fit ARIMA model using auto.arima
dry_wine_arima <- auto.arima(dry_wine_ts)
print(dry_wine_arima)
# Generate forecasts
dry_wine_forecast <- forecast(dry_wine_arima, h = 12)  # Forecast for the next 12 months
# Plot actual series and forecasts
plot(dry_wine_forecast, main = "Dry Wine Price Forecast", xlab = "Time", ylab = "Price")
# Generate forecasts
dry_wine_forecast <- forecast(dry_wine_arima, h = 12)  # Forecast for the next 12 months
# Plot actual series and forecasts
plot(dry_wine_forecast, main = "Dry Wine Price Forecast", xlab = "Time", ylab = "Price")
# Name: Thoma Glads Choppala
# Date: 03-14-24
# Professor Wada Roy
# Introduction to Enterprise Analytics - Module 3
# Question 1: Acquring Data
# Imported required packages
library(quantmod)
library(lubridate)
# Defined the start date as 5 years prior to the current date
start_date <- Sys.Date() - years(5)
# Retrieved historical stock data for Apple over the past 5 years
getSymbols("AAPL", src = "yahoo", from = start_date)
# Retrieved historical stock data for Honeywell over the past 5 years
getSymbols("HON", src = "yahoo", from = start_date)
# Displayed a summary of the stock data for Apple
summary(AAPL)
# Displayed a summary of the stock data for Honeywell
summary(HON)
# Question 2: AR (1) Time-Series Model Application
# Included libraries for time-series analysis
library(quantmod)
library(forecast)
# Extracted the adjusted closing prices for Apple and Honeywell stocks
apple_prices <- Ad(AAPL)
honey_prices <- Ad(HON)
# Fitted an AR(1) model to Apple's adjusted closing prices
apple_ar1_model <- Arima(apple_prices, order = c(1, 0, 0))
# Fitted an AR(1) model to Honeywell's adjusted closing prices
honey_ar1_model <- Arima(honey_prices, order = c(1, 0, 0))
# Forecasted the next 12 months (approximately 252 trading days)
apple_12m_forecast <- forecast(apple_ar1_model, h = 252)
honey_12m_forecast <- forecast(honey_ar1_model, h = 252)
# Visualized the forecast against historical data for Apple
plot(apple_12m_forecast, main = "Forecasted Apple Stock Prices", xlab = "Date", ylab = "Adjusted Closing Price",
col = "navy", fcol = "orange")
legend("topleft", legend = c("Historical", "Forecasted"), col = c("navy", "orange"), lty = 1)
# Visualized the forecast against historical data for Honeywell
plot(honey_12m_forecast, main = "Forecasted Honeywell Stock Prices", xlab = "Date", ylab = "Adjusted Closing Price",
col = "navy", fcol = "orange")
legend("topleft", legend = c("Historical", "Forecasted"), col = c("navy", "orange"), lty = 1)
# Question 3: Stationarity Test
# Loaded the tseries package for statistical testing
library(tseries)
# Conducted a stationarity test on Apple's adjusted closing prices
apple_stationarity_test <- adf.test(apple_prices, alternative = "stationary")
# Conducted a stationarity test on Honeywell's adjusted closing prices
honey_stationarity_test <- adf.test(honey_prices, alternative = "stationary")
# Printed results from the stationarity tests
cat("ADF Test for Apple's Prices:\n")
print(apple_stationarity_test)
cat("ADF Test for Honeywell's Prices:\n")
print(honey_stationarity_test)
# Question 4: Time-Series Modeling and Forecasting
# Accessed required packages for modeling
library(quantmod)
library(forecast)
# Retrieved the adjusted closing prices for the stocks again
apple_adj_prices <- Ad(AAPL)
honey_adj_prices <- Ad(HON)
# Identified the most suitable ARIMA models for both stocks using automated selection
apple_best_arima <- auto.arima(apple_adj_prices)
honey_best_arima <- auto.arima(honey_adj_prices)
# Outputted the details of the chosen models
cat("Optimal ARIMA Model for Apple:\n")
print(apple_best_arima)
cat("Optimal ARIMA Model for Honeywell:\n")
print(honey_best_arima)
# Generated a 12-month forecast based on the optimal models
apple_12m_prediction <- forecast(apple_best_arima, h = 12 * 21) # Assuming 21 trading days per month
honey_12m_prediction <- forecast(honey_best_arima, h = 12 * 21)
# Plotted the forecasting results for Apple stock
plot(apple_12m_prediction, main = "12-Month Forecast for Apple Stock (Auto ARIMA)", xlab = "Date", ylab = "Price",
col = "navy", fcol = "orange")
legend("topleft", legend = c("Observed", "Forecasted"), col = c("navy", "orange"), lty = 1)
# Plotted the forecasting results for Honeywell stock
plot(honey_12m_prediction, main = "12-Month Forecast for Honeywell Stock (Auto ARIMA)", xlab = "Date", ylab = "Price",
col = "navy", fcol = "orange")
legend("topleft", legend = c("Observed", "Forecasted"), col = c("navy", "orange"), lty = 1)
# Question 5: Forecasting for a Non-Stock Time Series
# Loaded necessary packages for data reading and forecasting
library(forecast)
library(readr)
# Read the dataset containing dry wine prices from a specified location
wine_data <- read_csv("dry_wine.csv") # Replace with the actual file path
# Created a time series object from the wine prices, assuming monthly data with a frequency of 12 for one year
wine_price_ts <- ts(wine_data$x, frequency = 12)
# Applied auto.arima to find the best fitting ARIMA model for the wine prices time series
optimal_wine_arima <- auto.arima(wine_price_ts)
# Displayed the best fitting ARIMA model for the wine prices
print("Optimal ARIMA Model for Wine Prices:")
print(optimal_wine_arima)
# Forecasted the wine prices for the next 12 months
wine_price_forecast <- forecast(optimal_wine_arima, h = 12)
# Plotted the forecasted wine prices along with the historical data
plot(wine_price_forecast, main = "12-Month Forecast for Dry Wine Prices", xlab = "Period", ylab = "Price",
col = "darkgreen", fcol = "darkred")
legend("topleft", legend = c("Historical Data", "Forecasted Prices"), col = c("darkgreen", "darkred"), lty = 1)
# The plot offers a visual representation of the forecasted trend against the actual prices
